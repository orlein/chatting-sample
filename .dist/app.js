(()=>{var e={12:(e,s,a)=>{const o=a(860),t=a(447),n=a(846),r=a(861),i=o.Router();i.post("/api/v1/auth/login",(async(e,s,a)=>{const{nickname:o,password:t}=e.body,n=await r.login({nickname:o,password:t});if(!n.result)return s.status(400).json({result:!1,message:n.message,data:[]});e.user=n.data[0],s.locals.message=n.message,a()}),t,(async(e,s)=>s.status(200).send({result:!0,message:s.locals.message,data:[e.user]}))),i.post("/api/v1/auth/join",(async(e,s,a)=>{const{nickname:o}=e.body,t=await r.checkDuplication({nickname:o});if(!t.result)return s.status(409).json({result:!1,message:t.message,data:[]});e.user={nickname:o},s.locals.message=t.message,a()}),t,(async(e,s)=>{const{nickname:a,password:o}=e.body,t=await r.join({nickname:a,password:o});return s.status(200).send({result:!0,message:s.locals.message,data:t.data})})),i.get("/api/v1/auth/info",n,(async(e,s)=>s.status(200).send({result:!0,message:s.locals.message,data:[e.user]}))),i.post("/api/v1/auth/logout",(async(e,s)=>s.clearCookie("accessToken").status(200).send({result:!0,message:"Logout success",data:[]}))),e.exports=i},843:(e,s,a)=>{const o=a(432),t=a(494),n={getUserWithCredentials:async({nickname:e,encryptedPassword:s})=>{const a=await t("SELECT * FROM users WHERE nickname = ?",[e]);if(0===a.length)return{type:"SELECT",user:null,message:"User not found",result:!1};const n=a[0];return await o.compare(s,n.password)?{type:"SELECT",user:n,message:"Successfully found user",result:!0}:{type:"SELECT",user:null,message:"Password is not matched",result:!1}},getUserByNickname:async e=>await t("SELECT * FROM users WHERE nickname = ?",[e]),getRoleByName:async e=>await t("SELECT * FROM roles WHERE name = ?",[e]),getUserRoleByName:async(e,s)=>await t("SELECT * FROM userRoles WHERE user_id = ? AND role_id = (SELECT id FROM roles WHERE name = ?)",[e,s]),addUser:async({nickname:e,password:s})=>{const a=await o.hash(s,10);return{type:"INSERT",message:"User added successfully",result:!0,queryResult:await t("INSERT into users (nickname, password) values (?, ?)",[e,a])}}};e.exports=n},861:(e,s,a)=>{const{getUserWithCredentials:o,addUser:t,getUserByNickname:n}=a(843),r={login:async({nickname:e,password:s})=>{const a=await o({nickname:e,encryptedPassword:s});return a.result?{result:!0,message:"Login successfully",data:[a.user]}:{result:!1,message:"Login failed",data:[]}},checkDuplication:async({nickname:e})=>(await n({nickname:e})).length>0?{result:!1,message:"Nickname is already used",data:[]}:{result:!0,message:"Nickname is available",data:[]},join:async({nickname:e,password:s})=>{const a=await t({nickname:e,password:s}),o=await n(e);return{result:!0,message:a.message,data:[o]}},info:async({nickname:e})=>{const s=await n(e);return 0===!s.length?{result:!1,message:"User not found",data:[]}:{result:!0,message:"Successfully found user",data:s}},authorizeUser:async({nickname:e,roleName:s})=>{const a=n(e);if(0===a.length)return{data:[],message:"User not found",result:!1};const o=a[0];return 0===(await authenticationRepository.getUserRoleByName(o.id,s)).length?{data:[],message:"User is not authorized",result:!1}:{data:[o[0]],message:`User is authorized with role ${s}`,result:!0}}};e.exports=r},846:(e,s,a)=>{const o=a(344),t=a(274),n=a(861);e.exports=async function(e,s,a){const r=e.signedCookies.accessToken;if(!r)return s.status(401).send({result:!1,message:"Access token is not provided",data:[]});const i=o.verify(r,t.jwtKey);if(i.exp<Date.now()/1e3)return s.status(401).send({result:!1,message:"Access token is expired",data:[]});const c=await n.info({nickname:i.nickname}),{password:d,...u}=c.data[0];e.user=u,s.locals.message="Access token is valid",a()}},447:(e,s,a)=>{const o=a(344),t=a(274),n=a(285);e.exports=async function(e,s,a){const{password:r,...i}=e.user,c=o.sign(i,t.jwtKey,{expiresIn:t.expiresIn});s.cookie("accessToken",c,{signed:!0,secret:n.cookieSecret,expires:t.expires()}),a()}},262:(e,s,a)=>{const o=a(860),t=a(846),n=a(954),r=o.Router();r.get("/api/v1/room",t,(async(e,s)=>{const a=await n.getAllRooms();s.send(a)})),r.post("/api/v1/room",t,(async(e,s)=>{const a=await n.addRoomByUser(e.body.roomName,e.user.id);s.send(a)})),r.delete("/api/v1/room/:id",t,(async(e,s)=>{await n.removeRoomByUser(e.params.id,e.user.id),s.send({message:"Room deleted",result:!0,data:[]})})),r.post("/api/v1/room/:id/join",t,(async(e,s)=>{const a=await n.joinRoom(e.params.id,e.user.id);s.send(a)})),r.get("/api/v1/room/:id/message",t,(async(e,s)=>{const a=await n.getRoomMessages(e.params.id);s.send(a)})),r.post("/api/v1/room/:id/message",t,(async(e,s)=>{const a=await n.addMessage(e.params.id,e.user.nickname,e.body.message);s.send(a)})),r.get("/api/v1/room/:id/user",t,(async(e,s)=>{const a=await n.getRoomUsers(e.params.id);s.send(a)})),r.get("/api/v1/room/:id",((e,s)=>{s.send("hi")})),e.exports=r},410:(e,s,a)=>{const o=a(494),t={getAllRooms:async()=>await o("SELECT * FROM rooms",[]),getRoomById:async e=>await o("SELECT * FROM rooms WHERE id = ?",[e]),addRoomByUser:async(e,s)=>(await o("INSERT into rooms (name, creator_user_id) values (?, ?)",[e,s]),await o("SELECT * FROM rooms WHERE creator_user_id = ? AND name = ?",[s,e])),removeRoomByUser:async(e,s)=>{await o("DELETE FROM rooms WHERE id = ? AND creator_user_id = ?",[e,s])},joinRoom:async(e,s)=>await o("INSERT into roomUsers (room_id, user_id) values (?, ?)",[e,s]),getRoomUsers:async e=>await o("SELECT * FROM users WHERE id IN (SELECT user_id FROM roomUsers WHERE room_id = ?)",[e]),getRoomMessages:async e=>await o("SELECT messages.*, users.nickname\n      FROM messages\n      LEFT JOIN users ON users.id = messages.user_id\n      WHERE room_id = ?",[e]),addMessage:async(e,s,a)=>await o("INSERT into messages (room_id, user_id, message) values (?, ?, ?)",[e,s,a]),quitRoom:async(e,s)=>{await o("DELETE FROM roomUsers WHERE room_id = ? AND user_id = ?",[e,s])}};e.exports=t},954:(e,s,a)=>{const o=a(410),t={getAllRooms:async()=>await o.getAllRooms(),getRoomById:async e=>await o.getRoomById(e),addRoomByUser:async(e,s)=>(await o.addRoomByUser(e,s))[0],removeRoomByUser:async(e,s)=>await o.removeRoomByUser(e,s),joinRoom:async(e,s)=>await o.joinRoom(e,s),getRoomUsers:async e=>await o.getRoomUsers(e),getRoomMessages:async e=>await o.getRoomMessages(e),addMessage:async(e,s,a)=>await o.addMessage(e,s,a),quitRoom:async(e,s)=>await o.quitRoom(e,s)};e.exports=t},743:(e,s,a)=>{const o=a(954);e.exports=(e,s)=>{s.on("/socket/v1/room",(s=>{e.socketsJoin("roomList"),e.in("roomList").emit("/socket/v1/room",s)})),s.on("/socket/v1/room/join",(a=>{const t=JSON.parse(a),{roomId:n,userId:r}=t;o.joinRoom(n,r),s.join(n),e.in(n).emit("/socket/v1/room/join",a)})),s.on("/socket/v1/room/quit",(a=>{const t=JSON.parse(a),{roomId:n,userId:r}=t;o.quitRoom(n,r),s.leave(n),e.in(n).emit("/socket/v1/room/quit",a)})),s.on("/socket/v1/room/chat",(s=>{const a=JSON.parse(s),{roomId:t,userId:n,nickname:r,message:i}=a;o.addMessage(t,n,r,i),e.in(t).emit("/socket/v1/room/chat",s)}))}},289:(e,s,a)=>{const o=a(860),t=a(494),n=o.Router();n.get("/api/v1/user",(async(e,s)=>{const a=await t("SELECT * FROM users",[]);s.cookie("token","jwt token",{httpOnly:!0}),s.send(a)})),n.post("/api/v1/user",(async(e,s)=>{await t("INSERT into users (name, email, password) values ('name1', 'email1@email.com', 'p@ssw0rd')",[],((e,s)=>{})),s.send("add user")})),e.exports=n},285:e=>{e.exports={cookieSecret:"secret"}},274:e=>{const s={jwtKey:"SAMPLE_KEY",expiresIn:"15 days",expires:()=>{const e=parseInt(s.expiresIn.split(" ")[0]);return new Date(Date.now()+864e5*e)}};e.exports=s},856:(e,s,a)=>{const o=a(661),{createDatabase:t,createTables:n}=a(70);e.exports=function(){return new Promise(((e,s)=>{const a=new o.Database("database.db",o.OPEN_READWRITE,(e=>{if(e&&"SQLITE_CANTOPEN"===e.code)return console.log("creating database"),void t();e&&(console.log(e),s(e),process.exit(1))}));n(a),e()}))}},70:(e,s,a)=>{const o=a(661);async function t(e){return new Promise(((s,a)=>{e.exec("\n      CREATE TABLE IF NOT EXISTS users (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        nickname TEXT NOT NULL UNIQUE,\n        password TEXT,\n        created_at TEXT,\n        updated_at TEXT\n      );\n\n      CREATE TABLE IF NOT EXISTS userRoles (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        user_id INTEGER,\n        role_id INTEGER,\n        created_at TEXT,\n        updated_at TEXT\n      );\n\n      CREATE TABLE IF NOT EXISTS roles (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        name TEXT NOT NULL UNIQUE,\n        created_at TEXT,\n        updated_at TEXT\n      );\n\n      CREATE TABLE IF NOT EXISTS rooms (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        name TEXT,\n        creator_user_id INTEGER,\n        created_at TEXT,\n        updated_at TEXT\n      );\n\n      CREATE TABLE IF NOT EXISTS messages (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        room_id INTEGER,\n        user_id INTEGER,\n        message TEXT,\n        created_at TEXT,\n        updated_at TEXT\n      );\n      \n      CREATE TABLE IF NOT EXISTS roomUsers (\n        room_id INTEGER,\n        user_id INTEGER\n      );\n\n    ",(e=>{e&&(console.log(e),a(e)),s()}))}))}e.exports={createDatabase:async function(){t(new o.Database("database.db",(e=>{e&&(console.log(e),process.exit(1))})))},createTables:t}},494:(e,s,a)=>{const o=a(661),t=a(67);e.exports=async function(e,s){return new Promise(((a,n)=>{new o.Database("database.db",o.OPEN_READWRITE,(e=>{e&&console.log(e)})).all(e,s,((e,s)=>{e&&(console.log(e),n(e));const o=t(s);a(o)}))}))}},894:(e,s,a)=>{const o=a(860).Router(),t=a(12),n=a(262),r=a(289);o.use(t),o.use(n),o.use(r),e.exports=o},376:(e,s,a)=>{const o=a(743),t={onConnection:e=>s=>{o(e,s)}};e.exports=t},67:e=>{e.exports=function e(s){if(null===s)return s;if("object"!=typeof s)return s;if(Array.isArray(s))return s.map(e);const a={};return Object.keys(s).forEach((o=>{const t=o.replace(/([-_][a-z])/gi,(e=>e.toUpperCase().replace("-","").replace("_","")));a[t]=e(s[o])})),a}},432:e=>{"use strict";e.exports=require("bcryptjs")},710:e=>{"use strict";e.exports=require("cookie-parser")},860:e=>{"use strict";e.exports=require("express")},344:e=>{"use strict";e.exports=require("jsonwebtoken")},537:e=>{"use strict";e.exports=require("next")},952:e=>{"use strict";e.exports=require("socket.io")},661:e=>{"use strict";e.exports=require("sqlite3")},685:e=>{"use strict";e.exports=require("http")}},s={};function a(o){var t=s[o];if(void 0!==t)return t.exports;var n=s[o]={exports:{}};return e[o](n,n.exports,a),n.exports}(()=>{const e=a(860),s=a(685),o=a(537),t=a(710),n=a(952),r=parseInt(process.env.PORT,10)||3e3,i=a(285),c=a(894),d=a(376),u=a(856),m=o({dev:!1}),E=m.getRequestHandler();m.prepare().then((()=>{const a=e();a.use(t(i.cookieSecret)),a.use(e.json()),a.use(e.urlencoded({extended:!0})),a.disable("etag"),u(),a.use(c),a.get("*",((e,s)=>E(e,s)));const o=s.createServer(a),m=new n.Server(o);m.on("connection",d.onConnection(m)),o.listen(r,(e=>{if(e)throw e;console.log(`> Ready on http://localhost:${r}`)}))}))})()})();